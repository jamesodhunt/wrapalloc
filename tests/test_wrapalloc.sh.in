#!/bin/sh -x
#---------------------------------------------------------------------
# Script to run a test program in an LD_PRELOAD
# environment which loads libwrapalloc.
#---------------------------------------------------------------------
# Copyright (C) 2015 James Hunt <jamesodhunt@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#---------------------------------------------------------------------

die()
{
    msg="$*"
    echo "ERROR: $msg" >&2
    exit 1
}

# fail fast
set -e

# disable core files
ulimit -c 0

# Name of binary program to run in the LD_PRELOAD environment
test_name="test_wrapalloc"

build_dir="@abs_builddir@"
test_path="$build_dir/$test_name"

preload_library="$build_dir/@preload_library@"

for file in "$test_path" "$preload_library"
do
    [ -e "$file" ] || die "file $file not found"
done

# Install the preload library to a temporary location since we need the
# full path to the shared library for LD_PRELOAD.
install_dir=$(mktemp -d --tmpdir="$builddir")
libtool --mode=install install \
    "$preload_library" "$install_dir" >/dev/null 2>&1

installed_lib=$(basename "$preload_library")
installed_so="$install_dir/$(echo "$installed_lib"|cut -d\. -f1).so"

[ -f "$installed_so" ] || die "cannot find $installed_so"

echo
echo "Running $test_path in LD_PRELOAD environment"
echo

for cmd in normal overrun underrun
do
    # Run test in modified environment
    { LD_PRELOAD=$installed_so $test_path "$cmd"; ret=$?; } || true

    case "$cmd" in 
        normal)
            [ "$ret" -eq 0 ] || die "expected return code zero, got $ret"
            ;;

        *)
            [ "$ret" -ne 0 ] || die "expected non-zero return code, got $ret"
            ;;
    esac
done

echo
echo "OK - all $test_path tests worked as expected"
echo

# clean up
libtool --mode=uninstall \
    rm "$install_dir/$installed_lib" >/dev/null 2>&1
